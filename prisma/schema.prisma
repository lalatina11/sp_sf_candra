// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid()) // Assuming string pk means UUID for primary key
  email      String       @unique
  password   String
  projects   Project[]    @relation("UserOwnedProjects")
  memberships Membership[]
  assignedTasks Task[]   @relation("TaskAssignee")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  ownerId     String
  owner       User          @relation("UserOwnedProjects", fields: [ownerId], references: [id])
  tasks       Task[]
  memberships Membership[]
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?  // Assuming description could be optional
  status      String   // You might want to use an Enum for status later
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  assigneeId  String?  // Assuming assignee could be optional based on the line from User to Task
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
}

model Membership {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // Ensures a user can only be a member of a project once
}

