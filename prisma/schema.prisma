// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  projects      Project[]    @relation("UserOwnedProjects")
  memberships   Membership[]
  assignedTasks Task[]       @relation("TaskAssignee")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}

model Project {
  id          String       @id @default(uuid())
  name        String
  ownerId     String
  owner       User         @relation("UserOwnedProjects", fields: [ownerId], references: [id])
  tasks       Task[]
  memberships Membership[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  assigneeId  String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}

model Membership {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())

  @@unique([userId, projectId])
}

